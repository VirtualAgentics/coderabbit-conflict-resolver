# CodeRabbit Conflict Resolver - Code Owners
#
# Strategy: Hybrid approach for GitHub Pro (Personal Account)
# - Maximum security for source code and critical config
# - Automated dependency updates via Renovate
#
# See: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners

# =============================================================================
# Security-First Hybrid Configuration
# =============================================================================
# GitHub Pro (personal accounts) does NOT support the "Allow specified actors
# to bypass" feature. That's only available for GitHub Team/Enterprise orgs.
#
# This configuration balances maximum security with Renovate automation:
#
# Strategy:
# 1. ALL source code requires @VirtualAgentics review (*.py, src/, tests/)
# 2. ALL critical config requires @VirtualAgentics review
# 3. Dependency-only files (pyproject.toml, requirements.txt) have NO owner
# 4. GitHub Actions workflows require review (for logic changes, not versions)
#
# Result:
# - Python dependency updates: Renovate automerges ‚úÖ
# - GitHub Actions version updates: Manual approval needed (~1-2/week) ‚ö†Ô∏è
# - Source code changes: Your approval required ‚úÖ
# - Critical config changes: Your approval required ‚úÖ
#
# Security Note:
# This approach prioritizes protection against supply chain attacks and
# malicious PRs (like the GitHub Actions injection vulnerabilities from 2024).
# All executable code and workflow logic requires human review.
# =============================================================================

# -----------------------------------------------------------------------------
# Source Code - REQUIRES REVIEW (Security Critical)
# -----------------------------------------------------------------------------

# All Python source code (prevents malicious code injection)
*.py @VirtualAgentics

# Core modules (critical business logic)
/src/pr_conflict_resolver/core/ @VirtualAgentics
/src/pr_conflict_resolver/analysis/ @VirtualAgentics
/src/pr_conflict_resolver/handlers/ @VirtualAgentics
/src/pr_conflict_resolver/strategies/ @VirtualAgentics
/src/pr_conflict_resolver/integrations/ @VirtualAgentics
/src/pr_conflict_resolver/security/ @VirtualAgentics
/src/pr_conflict_resolver/cli/ @VirtualAgentics
/src/pr_conflict_resolver/config/ @VirtualAgentics

# Tests (ensure test integrity)
/tests/ @VirtualAgentics

# Build and packaging scripts (can execute arbitrary code)
/scripts/ @VirtualAgentics
/setup.py @VirtualAgentics
/setup-dev.sh @VirtualAgentics
/setup-dev.ps1 @VirtualAgentics

# -----------------------------------------------------------------------------
# GitHub Actions & CI/CD - REQUIRES REVIEW (Injection Prevention)
# -----------------------------------------------------------------------------
# After GitHub Actions injection vulnerabilities (2024), all workflow changes
# require review. Even "version bumps" from Renovate need quick verification
# to ensure no malicious code was injected.
#
# Manual review process: Check that changes are ONLY version bumps:
# - uses: actions/checkout@v4 ‚Üí v5 ‚úÖ (safe to approve)
# - Adding new env vars or steps ‚ùå (requires careful review)

/.github/workflows/ @VirtualAgentics
/.github/codeql/ @VirtualAgentics

# -----------------------------------------------------------------------------
# Critical Configuration - REQUIRES REVIEW (Security Critical)
# -----------------------------------------------------------------------------

/.github/CODEOWNERS @VirtualAgentics
/.github/renovate.json5 @VirtualAgentics
/.github/labeler.yml @VirtualAgentics
/.github/ISSUE_TEMPLATE/ @VirtualAgentics
/.pre-commit-config.yaml @VirtualAgentics
/.coderabbit.yaml @VirtualAgentics
/Makefile @VirtualAgentics

# -----------------------------------------------------------------------------
# Documentation - REQUIRES REVIEW
# -----------------------------------------------------------------------------

*.md @VirtualAgentics
*.rst @VirtualAgentics
/docs/ @VirtualAgentics
/README.md @VirtualAgentics
/CONTRIBUTING.md @VirtualAgentics
/SECURITY.md @VirtualAgentics
/CODE_OF_CONDUCT.md @VirtualAgentics
/LICENSE @VirtualAgentics

# -----------------------------------------------------------------------------
# Dependency Files - NO OWNER (Renovate Automerge Zone)
# -----------------------------------------------------------------------------
# These files are intentionally left WITHOUT owner assignment.
# Renovate PRs that ONLY modify these files can automerge after CI passes.
#
# Security is maintained by:
# 1. Required CI checks: tests, linting, security scans, CodeQL
# 2. pip-audit scans for vulnerable packages (blocks merge if found)
# 3. Renovate only updates versions, never adds malicious code
# 4. You receive notifications and can review manually if suspicious
#
# Files without owners (Renovate can automerge):
# - pyproject.toml (Python dependency versions only)
# - requirements*.txt (Python dependency versions only)
#
# IMPORTANT: If a PR modifies BOTH dependencies AND source code, the source
# code pattern (*.py) will match and require your review for the entire PR.

# =============================================================================
# Pattern Matching Behavior
# =============================================================================
#
# GitHub CODEOWNERS uses "last match wins" - the LAST matching pattern
# determines ownership. We use this strategically:
#
# Scenario 1: Renovate updates pyproject.toml (dependency version bump)
# - No pattern explicitly matches pyproject.toml
# - No owner required
# - CI checks must pass (tests, security, linting)
# - Automerge: ‚úÖ ALLOWED
#
# Scenario 2: Renovate updates GitHub Actions workflow (version bump)
# - Pattern matches: /.github/workflows/ @VirtualAgentics
# - Owner review required
# - Manual action: Quick approval after verifying only versions changed
# - Automerge: ‚ö†Ô∏è BLOCKED (manual approval ~1-2/week, takes 30 seconds)
#
# Scenario 3: Human modifies pyproject.toml + adds new source file
# - pyproject.toml: no owner
# - new_module.py: matches *.py @VirtualAgentics
# - Owner review required for entire PR
# - Automerge: ‚ùå BLOCKED (security: source code changed)
#
# Scenario 4: Human modifies pyproject.toml (adds new tool config, not deps)
# - No pattern matches
# - No owner required
# - BUT: Usually accompanies source code changes which DO require review
# - Edge case: Pure config changes could merge without review
# - Mitigation: You receive notification, can review manually
#
# Scenario 5: Malicious PR tries to inject code via workflow
# - Pattern matches: /.github/workflows/ @VirtualAgentics
# - Owner review required
# - You inspect diff and catch malicious injection
# - Automerge: ‚ùå BLOCKED (security: protected by Code Owners)
#
# =============================================================================
# Trade-offs and Security Considerations
# =============================================================================
#
# ‚úÖ Pros:
# - Maximum protection for source code and CI/CD (lessons from 2024 attacks)
# - Renovate automerges Python dependency updates (~70% of Renovate PRs)
# - All GitHub Actions changes require review (prevents injection attacks)
# - Zero additional cost (works with GitHub Pro personal plan)
# - Strong CI checks provide additional security layer
#
# ‚ö†Ô∏è Manual Review Required:
# - GitHub Actions version updates: ~1-2 per week
#   - Quick to review: just verify diff shows only version changes
#   - Takes ~30 seconds per PR
#   - Critical for security after 2024 injection vulnerabilities
#
# üîí Security Strengths:
# - All executable code requires human review (*.py, scripts/, setup.py)
# - All workflow logic requires human review (prevents injection attacks)
# - All critical config requires human review
# - CI checks always required: 5 different security/quality gates
# - pip-audit blocks vulnerable dependencies automatically
# - You're notified of ALL PRs (can manually review any time)
#
# üéØ Attack Scenarios Protected Against:
# 1. Malicious dependency injection ‚Üí Blocked by pip-audit
# 2. Supply chain compromise ‚Üí Blocked by security-scan workflow
# 3. GitHub Actions injection ‚Üí Blocked by Code Owner review requirement
# 4. Malicious source code changes ‚Üí Blocked by *.py owner requirement
# 5. Backdoor in tests ‚Üí Blocked by /tests/ owner requirement
#
# =============================================================================
# Alternative Approaches
# =============================================================================
#
# If you want FULL automation (including GitHub Actions automerge):
#
# Option 1: Disable "Require review from Code Owners" in branch protection
# - Pros: Renovate automerges everything
# - Cons: Less protection, but CI checks still enforce quality
# - Security: Still strong (5 required CI checks), but no human gate
#
# Option 2: Convert to Organization + GitHub Team plan ($4/month)
# - Pros: Full automation + maximum security (bypass feature)
# - Cons: Additional cost, more complexity
# - Result: renovate[bot] can bypass Code Owners, humans can't
#
# Current approach (Option A) is recommended for personal repos that
# prioritize security without additional cost.
# =============================================================================
