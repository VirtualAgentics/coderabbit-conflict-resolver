[
  {
    "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887326",
    "pull_request_review_id": 3380070851,
    "id": 2462887326,
    "node_id": "PRRC_kwDOQIjP-M6SzK2e",
    "diff_hunk": "@@ -38,6 +38,7 @@ def __init__(self, config: dict[str, Any] | None = None) -> None:\n             FileType.TOML: TomlHandler(),\n         }\n         self.strategy = PriorityStrategy(config)\n+        self.github_extractor = GitHubCommentExtractor()",
    "path": "src/pr_conflict_resolver/core/resolver.py",
    "commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "original_commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "user": {
      "login": "coderabbitai[bot]",
      "id": 136622811,
      "node_id": "BOT_kgDOCCSy2w",
      "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
      "html_url": "https://github.com/apps/coderabbitai",
      "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "_\ud83e\uddf9 Nitpick_ | _\ud83d\udd35 Trivial_\n\n**Inject extractor, add typing, and init logger for testability and observability**\n\nMake the extractor injectable, type the attribute, and initialize a logger to satisfy strict typing and logging guidelines.\n\n\nApply this diff within the constructor:\n\n```diff\n-    def __init__(self, config: dict[str, Any] | None = None) -> None:\n+    def __init__(\n+        self,\n+        config: dict[str, Any] | None = None,\n+        github_extractor: GitHubCommentExtractor | None = None,\n+    ) -> None:\n@@\n-        self.strategy = PriorityStrategy(config)\n-        self.github_extractor = GitHubCommentExtractor()\n+        self.strategy = PriorityStrategy(config)\n+        self.github_extractor = github_extractor or GitHubCommentExtractor()\n+        import logging\n+        self.log = logging.getLogger(__name__)\n```\n\nAdd a class-level annotation to satisfy MyPy strict:\n\n```python\n# near class body, above __init__\ngithub_extractor: GitHubCommentExtractor\n```\n\nAs per coding guidelines.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/pr_conflict_resolver/core/resolver.py around line 41, add a class-level\nannotation \"github_extractor: GitHubCommentExtractor\" above __init__, and change\nthe constructor to accept an optional GitHubCommentExtractor parameter (typed)\nso the extractor is injectable; inside __init__ assign the provided extractor to\nself.github_extractor or default to GitHubCommentExtractor(), and also\ninitialize a logger with self.logger = logging.getLogger(__name__) (add\nnecessary imports for typing Optional and logging) to satisfy strict typing and\nenable observability.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "created_at": "2025-10-25T14:56:39Z",
    "updated_at": "2025-10-25T14:56:40Z",
    "html_url": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887326",
    "pull_request_url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887326"
      },
      "html": {
        "href": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887326"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 41,
    "original_line": 41,
    "side": "RIGHT",
    "author_association": "CONTRIBUTOR",
    "original_position": 4,
    "position": 4,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887329",
    "pull_request_review_id": 3380070851,
    "id": 2462887329,
    "node_id": "PRRC_kwDOQIjP-M6SzK2h",
    "diff_hunk": "@@ -464,19 +465,42 @@ def _apply_plaintext_change(self, change: Change) -> bool:\n         except Exception:\n             return False\n \n+    def _fetch_comments_with_error_context(\n+        self, owner: str, repo: str, pr_number: int\n+    ) -> list[dict[str, Any]]:\n+        \"\"\"Fetch PR comments with proper error context.\n+\n+        Parameters:\n+            owner (str): Repository owner.\n+            repo (str): Repository name.\n+            pr_number (int): Pull request number.\n+\n+        Returns:\n+            list[dict[str, Any]]: List of PR comments.\n+\n+        Raises:\n+            RuntimeError: If fetching PR comments fails.\n+        \"\"\"\n+        try:\n+            return self.github_extractor.fetch_pr_comments(owner, repo, pr_number)\n+        except Exception as e:\n+            raise RuntimeError(\n+                f\"Failed to fetch PR comments \"\n+                f\"(owner={owner}, repo={repo}, pr_number={pr_number}): {e}\"\n+            ) from e\n+",
    "path": "src/pr_conflict_resolver/core/resolver.py",
    "commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "original_commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "user": {
      "login": "coderabbitai[bot]",
      "id": 136622811,
      "node_id": "BOT_kgDOCCSy2w",
      "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
      "html_url": "https://github.com/apps/coderabbitai",
      "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "_\u26a0\ufe0f Potential issue_ | _\ud83d\udfe0 Major_\n\n**RuntimeError is effectively unreachable; extractor swallows network errors**\n\nGitHubCommentExtractor.fetch_pr_comments catches RequestException and returns [], so this try/except almost never triggers. Result: silent failures with empty comments while docstrings claim a RuntimeError.\n\n\nTwo options:\n\n- Option A (preferred): Make the extractor raise a specific error and wrap it here.\n- Option B (non-breaking): Keep empty-list semantics, log a warning, and remove the Raises clauses. Optionally add a strict mode to raise on empty.\n\nApply this diff (Option B minimal, adds logging + optional strict):\n\n```diff\n-        try:\n-            return self.github_extractor.fetch_pr_comments(owner, repo, pr_number)\n-        except Exception as e:\n-            raise RuntimeError(\n-                f\"Failed to fetch PR comments \"\n-                f\"(owner={owner}, repo={repo}, pr_number={pr_number}): {e}\"\n-            ) from e\n+        comments = self.github_extractor.fetch_pr_comments(owner, repo, pr_number)\n+        if not comments:\n+            # Distinguish \"no comments\" vs \"fetch failure\" is not possible with current extractor.\n+            # Log with context; optionally raise if strict mode requested.\n+            msg = (\n+                \"No PR comments fetched \"\n+                f\"(owner={owner}, repo={repo}, pr_number={pr_number}). \"\n+                \"This may indicate no comments or a fetch failure.\"\n+            )\n+            if hasattr(self, \"log\"):\n+                self.log.warning(msg)\n+            if bool(self.config.get(\"strict_fetch\", False)):\n+                raise RuntimeError(msg)\n+        return comments\n```\n\nIf you choose Option A, modify integrations/github.py to raise a specific exception (e.g., GitHubAPIError) instead of returning [] on failures, then catch and wrap here. Based on learnings.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "created_at": "2025-10-25T14:56:39Z",
    "updated_at": "2025-10-25T14:56:40Z",
    "html_url": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887329",
    "pull_request_url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887329"
      },
      "html": {
        "href": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887329"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 468,
    "original_start_line": 468,
    "start_side": "RIGHT",
    "line": 491,
    "original_line": 491,
    "side": "RIGHT",
    "author_association": "CONTRIBUTOR",
    "original_position": 35,
    "position": 35,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887331",
    "pull_request_review_id": 3380070851,
    "id": 2462887331,
    "node_id": "PRRC_kwDOQIjP-M6SzK2j",
    "diff_hunk": "@@ -464,19 +465,42 @@ def _apply_plaintext_change(self, change: Change) -> bool:\n         except Exception:\n             return False\n \n+    def _fetch_comments_with_error_context(\n+        self, owner: str, repo: str, pr_number: int\n+    ) -> list[dict[str, Any]]:\n+        \"\"\"Fetch PR comments with proper error context.\n+\n+        Parameters:\n+            owner (str): Repository owner.\n+            repo (str): Repository name.\n+            pr_number (int): Pull request number.\n+\n+        Returns:\n+            list[dict[str, Any]]: List of PR comments.\n+\n+        Raises:\n+            RuntimeError: If fetching PR comments fails.\n+        \"\"\"\n+        try:\n+            return self.github_extractor.fetch_pr_comments(owner, repo, pr_number)\n+        except Exception as e:\n+            raise RuntimeError(\n+                f\"Failed to fetch PR comments \"\n+                f\"(owner={owner}, repo={repo}, pr_number={pr_number}): {e}\"\n+            ) from e\n+\n     def resolve_pr_conflicts(self, owner: str, repo: str, pr_number: int) -> ResolutionResult:\n         \"\"\"Orchestrates detection, resolution, and application of suggested changes.\n \n         Returns:\n             ResolutionResult: Summary of applied resolutions and statistics. The returned object's\n                 `conflicts` attribute is populated with the list of detected conflicts for the PR.\n+\n+        Raises:\n+            RuntimeError: If fetching PR comments fails.\n         \"\"\"",
    "path": "src/pr_conflict_resolver/core/resolver.py",
    "commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "original_commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "user": {
      "login": "coderabbitai[bot]",
      "id": 136622811,
      "node_id": "BOT_kgDOCCSy2w",
      "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
      "html_url": "https://github.com/apps/coderabbitai",
      "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "_\ud83e\uddf9 Nitpick_ | _\ud83d\udd35 Trivial_\n\n**Docstring says \u201cRaises: RuntimeError\u201d but helper won\u2019t raise in current flow**\n\nUnless you adopt strict mode or change the extractor to raise, this method won\u2019t raise. Align docs or implement the raise path.\n\n\nIf keeping non-raising semantics, apply:\n\n```diff\n-        Raises:\n-            RuntimeError: If fetching PR comments fails.\n+        Note:\n+            Fetch errors are logged. Set `config['strict_fetch']=True` to raise on empty fetches.\n```\n\nAs per coding guidelines.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        Note:\n            Fetch errors are logged. Set `config['strict_fetch']=True` to raise on empty fetches.\n        \"\"\"\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/pr_conflict_resolver/core/resolver.py around lines 499-501, the docstring\nclaims the method \"Raises: RuntimeError\" but the called helper never raises in\nthe current flow; either remove the Raises entry or implement a raise path. Fix\nby one of two options: (A) keep non-raising semantics \u2014 remove the \"Raises:\nRuntimeError\" section and update the docstring to state the method returns an\nempty result or None on helper failure, or (B) enforce raising \u2014 detect the\nhelper's failure return (e.g., None, False, or an error payload) and raise a\nRuntimeError with a clear contextual message before returning. Ensure the chosen\napproach matches project coding guidelines and update tests/docs accordingly.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "created_at": "2025-10-25T14:56:40Z",
    "updated_at": "2025-10-25T14:56:40Z",
    "html_url": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887331",
    "pull_request_url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887331"
      },
      "html": {
        "href": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887331"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 499,
    "original_start_line": 499,
    "start_side": "RIGHT",
    "line": 501,
    "original_line": 501,
    "side": "RIGHT",
    "author_association": "CONTRIBUTOR",
    "original_position": 45,
    "position": 45,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887334",
    "pull_request_review_id": 3380070851,
    "id": 2462887334,
    "node_id": "PRRC_kwDOQIjP-M6SzK2m",
    "diff_hunk": "@@ -504,13 +528,12 @@ def analyze_conflicts(self, owner: str, repo: str, pr_number: int) -> list[Confl\n         Returns:\n             list[Conflict]: List of detected Conflict objects representing overlapping or\n                 incompatible suggested changes found in the pull request.\n+\n+        Raises:\n+            RuntimeError: If fetching PR comments fails.\n         \"\"\"",
    "path": "src/pr_conflict_resolver/core/resolver.py",
    "commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "original_commit_id": "5b749f30cbe9f54b8e8d0296b015ab0ca8ddaeac",
    "user": {
      "login": "coderabbitai[bot]",
      "id": 136622811,
      "node_id": "BOT_kgDOCCSy2w",
      "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
      "html_url": "https://github.com/apps/coderabbitai",
      "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "_\ud83e\uddf9 Nitpick_ | _\ud83d\udd35 Trivial_\n\n**Docstring \u201cRaises\u201d likely inaccurate here as well**\n\nSame issue as resolve_pr_conflicts: either implement raising or update docs to reflect logging-only behavior with optional strict mode.\n\n\nSuggested doc tweak:\n\n```diff\n-        Raises:\n-            RuntimeError: If fetching PR comments fails.\n+        Note:\n+            Fetch errors are logged. Enable strict mode via `config['strict_fetch']=True` to raise.\n```\n\nAs per coding guidelines.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/pr_conflict_resolver/core/resolver.py around lines 532 to 534, the\ndocstring claims a RuntimeError is raised when fetching PR comments fails, but\nthe implementation currently only logs (no raise) \u2014 either make the function\nactually raise RuntimeError on fetch failure or update the docstring to reflect\nthe logging-only behavior; if you want both behaviors add a boolean strict\nparameter (e.g. strict=False) and implement: on failure log and return/continue\nwhen strict is False, but raise RuntimeError when strict is True, then update\nthe docstring to describe the new parameter and the exact raising behavior.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "created_at": "2025-10-25T14:56:40Z",
    "updated_at": "2025-10-25T14:56:40Z",
    "html_url": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887334",
    "pull_request_url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887334"
      },
      "html": {
        "href": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#discussion_r2462887334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/8"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/pulls/comments/2462887334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 532,
    "original_start_line": 532,
    "start_side": "RIGHT",
    "line": 534,
    "original_line": 534,
    "side": "RIGHT",
    "author_association": "CONTRIBUTOR",
    "original_position": 63,
    "position": 63,
    "subject_type": "line"
  },
  {
    "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/issues/comments/3446796092",
    "html_url": "https://github.com/VirtualAgentics/coderabbit-conflict-resolver/pull/8#issuecomment-3446796092",
    "issue_url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/issues/8",
    "id": 3446796092,
    "node_id": "IC_kwDOQIjP-M7Nce88",
    "user": {
      "login": "coderabbitai[bot]",
      "id": 136622811,
      "node_id": "BOT_kgDOCCSy2w",
      "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
      "html_url": "https://github.com/apps/coderabbitai",
      "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2025-10-25T14:45:24Z",
    "updated_at": "2025-10-25T14:56:38Z",
    "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n<!-- walkthrough_start -->\n\n<details>\n<summary>\ud83d\udcdd Walkthrough</summary>\n\n## Walkthrough\n\nCentralizes PR comment fetching in `ConflictResolver` by adding `self.github_extractor` and a `_fetch_comments_with_error_context(...)` helper that wraps extractor failures in `RuntimeError`. Calls to `GitHubCommentExtractor` inside `resolve_pr_conflicts` and `analyze_conflicts` are replaced by this helper. Tests change membership assertions to subset checks.\n\n## Changes\n\n| Cohort / File(s) | Summary |\n|---|---|\n| **Conflict resolver \u2014 extractor centralization** <br> `src/pr_conflict_resolver/core/resolver.py` | Adds `self.github_extractor = GitHubCommentExtractor()` to the initializer; introduces `_fetch_comments_with_error_context(owner, repo, pr_number)` which calls the extractor and wraps failures in `RuntimeError` with context. Replaces inline creation/usage of `GitHubCommentExtractor` in `resolve_pr_conflicts()` and `analyze_conflicts()` with the new helper. Docstrings updated to note `RuntimeError` propagation. |\n| **Test assertion style updates** <br> `tests/unit/test_handlers.py` | Replaces `assert all(key in keys for key in expected_keys)` membership checks with subset assertions `assert set(expected_keys) <= set(keys)` across JSON, YAML, and TOML extraction tests. |\n\n## Sequence Diagram(s)\n\n```mermaid\nsequenceDiagram\n    participant Caller as Caller (uses API)\n    participant Resolver as ConflictResolver\n    participant Extractor as GitHubCommentExtractor\n    participant Analyzer as ChangeExtractor\n\n    Note over Resolver: New attribute<br/>self.github_extractor\n\n    Caller->>Resolver: resolve_pr_conflicts(owner, repo, pr_number, ...)\n    Resolver->>Resolver: _fetch_comments_with_error_context(owner, repo, pr_number)\n    alt success\n        Resolver->>Extractor: fetch_pr_comments(owner, repo, pr_number)\n        Extractor-->>Resolver: comments\n        Resolver->>Analyzer: extract_changes_from_comments(comments)\n        Analyzer-->>Resolver: changes\n        Resolver-->>Caller: result (conflict resolution)\n    else failure\n        Extractor--x Resolver: raises/returns error\n        Resolver-->>Caller: raises RuntimeError (with context)\n    end\n```\n\n## Estimated code review effort\n\n\ud83c\udfaf 3 (Moderate) | \u23f1\ufe0f ~20 minutes\n\n- Areas needing attention:\n  - `src/pr_conflict_resolver/core/resolver.py`: verify the helper includes sufficient context and preserves original exception details where appropriate.\n  - Confirm all former direct uses of `GitHubCommentExtractor` were replaced and no duplicate logic remains.\n  - Ensure docstring and type hints reflect the new RuntimeError behavior.\n  - `tests/unit/test_handlers.py`: confirm subset assertions retain intended test coverage and don't loosen checks unintentionally.\n\n</details>\n\n<!-- walkthrough_end -->\n\n\n<!-- pre_merge_checks_walkthrough_start -->\n\n## Pre-merge checks and finishing touches\n<details>\n<summary>\u2705 Passed checks (3 passed)</summary>\n\n|     Check name     | Status   | Explanation|\n| :----------------: | :------- ||\n|  Description Check | \u2705 Passed | Check skipped - CodeRabbit\u2019s high-level summary is enabled|\n|     Title Check    | \u2705 Passed | The PR title \"test: improve assertion consistency and refactor resolver\" accurately captures both primary objectives described in the changeset. It directly references the test assertion pattern improvements (replacing generator-style with set-based assertions) and the resolver refactoring (extracting common GitHub comment fetching logic). The title is specific, concise, and uses a conventional commit format; it clearly conveys the main changes without vague terminology or excessive verbosity, making it understandable to someone scanning the project history. |\n| Docstring Coverage | \u2705 Passed | Docstring coverage is 100.00% which is sufficient. The required threshold is 80.00%.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n\n</details>\n\n<!-- pre_merge_checks_walkthrough_end -->\n\n<!-- finishing_touch_checkbox_start -->\n\n<details>\n<summary>\u2728 Finishing touches</summary>\n\n- [ ] <!-- {\"checkboxId\": \"7962f53c-55bc-4827-bfbf-6a18da830691\"} --> \ud83d\udcdd Generate docstrings\n<details>\n<summary>\ud83e\uddea Generate unit tests (beta)</summary>\n\n- [ ] <!-- {\"checkboxId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\", \"radioGroupId\": \"utg-output-choice-group-unknown_comment_id\"} -->   Create PR with unit tests\n- [ ] <!-- {\"checkboxId\": \"07f1e7d6-8a8e-4e23-9900-8731c2c87f58\", \"radioGroupId\": \"utg-output-choice-group-unknown_comment_id\"} -->   Post copyable unit tests in a comment\n- [ ] <!-- {\"checkboxId\": \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"radioGroupId\": \"utg-output-choice-group-unknown_comment_id\"} -->   Commit unit tests in branch `test/improve-assertion-consistency`\n\n</details>\n\n</details>\n\n<!-- finishing_touch_checkbox_end -->\n\n<!-- tips_start -->\n\n---\n\n\n\n<sub>Comment `@coderabbitai help` to get the list of available commands and usage tips.</sub>\n\n<!-- tips_end -->\n\n<!-- internal state start -->\n\n\n<!-- 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 -->\n\n<!-- internal state end -->",
    "author_association": "CONTRIBUTOR",
    "reactions": {
      "url": "https://api.github.com/repos/VirtualAgentics/coderabbit-conflict-resolver/issues/comments/3446796092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": {
      "id": 347564,
      "client_id": "Iv1.6aaafe4fe882736b",
      "slug": "coderabbitai",
      "node_id": "A_kwHOB96YWc4ABU2s",
      "owner": {
        "login": "coderabbitai",
        "id": 132028505,
        "node_id": "O_kgDOB96YWQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/132028505?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coderabbitai",
        "html_url": "https://github.com/coderabbitai",
        "followers_url": "https://api.github.com/users/coderabbitai/followers",
        "following_url": "https://api.github.com/users/coderabbitai/following{/other_user}",
        "gists_url": "https://api.github.com/users/coderabbitai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/coderabbitai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/coderabbitai/subscriptions",
        "organizations_url": "https://api.github.com/users/coderabbitai/orgs",
        "repos_url": "https://api.github.com/users/coderabbitai/repos",
        "events_url": "https://api.github.com/users/coderabbitai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/coderabbitai/received_events",
        "type": "Organization",
        "user_view_type": "public",
        "site_admin": false
      },
      "name": "coderabbitai",
      "description": "# Transforming Code Reviews with AI\r\n\r\n## Features\r\n\r\n**Automated Reviews**: Continuous reviews of the pull requests including incremental commits. \r\n\r\n**Summarization**: Generates high-level summary and a technical walkthrough of the PR changes.\u00a0\r\n\r\n**Line-by-line review**: Provides line-by-line suggestions committable with one click.\r\n\r\n**Codebase verification**:  Verifies the impact on the overall codebase and identifies missing changes.\r\n\r\n**Insights into your code**:  Ask any questions on your codebase within the pull request \r\n\r\n**Chat about your code** : Chat with the bot around your code.\u00a0The more you chat, the smarter it gets.\r\n\r\n**Issue Validation**:  Validates the PR against the linked issues and identifies other related issues\u00a0\r\n\r\n\r\n\r\n",
      "external_url": "https://coderabbit.ai?utm_source=cr_app&utm_medium=github",
      "html_url": "https://github.com/apps/coderabbitai",
      "created_at": "2023-06-14T15:47:27Z",
      "updated_at": "2025-08-21T21:40:57Z",
      "permissions": {
        "actions": "read",
        "checks": "read",
        "contents": "write",
        "discussions": "read",
        "issues": "write",
        "members": "read",
        "metadata": "read",
        "pull_requests": "write",
        "statuses": "write"
      },
      "events": [
        "issues",
        "issue_comment",
        "label",
        "organization",
        "pull_request",
        "pull_request_review",
        "pull_request_review_comment",
        "pull_request_review_thread",
        "release",
        "repository"
      ]
    }
  }
]
